const router = require('express').Router();

// the setup code skipped
const bcryptjs = require('bcryptjs');

// Require the Model to save the users in MongoDB
//The user model is the blueprint that will be used when new users are created
const User = require('../models/User.model');


// GET route ==> to display the signup form to users
router.get('/signup', async (req, res, next) => {
  try {
    // if there is an err in the url, it will passed to the view 'auth/signup' ans be shown
    const { err } = req.query;
    res.render('auth/signup', { err });
  } catch(error) {
      console.error(`Something wrong happened, please try again! ${error}`)
    next(error)
  }
});

// POST route ==> to process form data
router.post('/signup', async (req, res) => {
  try {
    const { username, email, password } = req.body;
    // console.log("The form data: ", req.body);
    
    const hassMissingCredentials = !email || !password || !username;
    if (hassMissingCredentials ) {
      return res.redirect("/signup?err=Missing credentials");
    }
    //salt rounds is a number from 0 to 20 that defines the complexity of the salt
    const saltRounds = 10;
    // salt is a random string generated by bcrypt to add complexity in the hast
    const salt = await bcryptjs.genSalt(saltRounds);
    // hash the password received from the req.body
    // create the has out of the password and the salt
    const hashedPassword = await bcryptjs.hash(password, salt);
    const newUser = await User.create({
      username,
      email,
      passwordHash: hashedPassword
    });
    console.log('Newcreated user is: ', newUser);
    res.redirect('/userProfile');
  } catch(error) {
    console.error(`Something wrong creating with the sign up! ${error}`)
    return res.redirect("/signup?err=Something went wrong");
  }
});


// GET route ==> to display the login form to users
router.get('/login', async (req, res) => {
  try {
    // if there is an err in the url, it will passed to the view 'auth/login' ans be shown
    const { err } = req.query;
    res.render('auth/login', { err });
  } catch(error) {
      console.error(`Something wrong happened, please try again! ${error}`)
    next(error)
  }
});

// POST route ==> to get the login information from the form
router.post('/login', async (req, res) => {
 try {
  const { email, password } = req.body;
  // console.log("The form data: ", req.body);
  
  const hassMissingCredentials = !email || !password;
  if (hassMissingCredentials ) {
    return res.redirect("/login?err=Missing credentials");
  }
  // email is unique
  const user = await User.findOne( { email });
  console.log(email)
  if (!user) {
    return res.redirect("/login?err=The user wasn't found");
  }
  const verify = await bcryptjs.compareSync(password, user.passwordHash);
  if (verify) {
    return res.redirect("/userProfile")
  }
  return res.redirect("/login?err=Something went wrong");
 } catch(error) {
  console.error(`Something wrong creating with the sign up! ${error}`)
  return res.redirect("/login?err=Something went wrong");
 }
});

// GET route --> user profile, render user-profile.hbs
router.get('/userProfile', (req, res) => res.render('users/user-profile'));


module.exports = router;


